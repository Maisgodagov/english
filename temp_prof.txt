   1: import { useCallback, useMemo, useState } from 'react';
   2: import { Alert } from 'react-native';
   3: import styled from 'styled-components/native';
   4: 
   5: import { useAppDispatch, useAppSelector } from '@app/store/hooks';
   6: import { authApi } from '@features/auth/api/authApi';
   7: import { resetAuthState } from '@features/auth/model/authSlice';
   8: import { hydrateProgress } from '@features/progress/model/progressSlice';
   9: import { resetDictionary } from '@features/dictionary/model/dictionarySlice';
  10: import { clearProfile } from '@entities/user/model/userSlice';
  11: import { PrimaryButton, SurfaceCard, Typography } from '@shared/ui';
  12: import { roleDisplayName } from '@shared/constants/roles';
  13: 
  14: const Screen = styled.View`
  15:   flex: 1;
  16:   padding: 64px 20px 20px;
  17:   background-color: ${({ theme }) => theme.colors.backgroundAlt};
  18:   gap: 20px;
  19: `;
  20: 
  21: const Card = styled(SurfaceCard)`
  22:   gap: 24px;
  23: `;
  24: 
  25: const Header = styled.View`
  26:   flex-direction: row;
  27:   gap: 16px;
  28:   align-items: center;
  29: `;
  30: 
  31: const Avatar = styled.Image`
  32:   width: 72px;
  33:   height: 72px;
  34:   border-radius: 36px;
  35: `;
  36: 
  37: const Summary = styled.View`
  38:   flex: 1;
  39:   gap: 4px;
  40: `;
  41: 
  42: const Metrics = styled.View`
  43:   flex-direction: row;
  44:   justify-content: space-between;
  45:   gap: 12px;
  46: `;
  47: 
  48: const Metric = styled.View`
  49:   flex: 1;
  50:   align-items: center;
  51: `;
  52: 
  53: const AVATAR_BASE = 'https://ui-avatars.com/api/';
  54: 
  55: const buildPlaceholderUrl = (fullName?: string | null) => {
  56:   const name = fullName?.trim() ? fullName.trim() : 'English Learner';
  57:   const params = new URLSearchParams({
  58:     name,
  59:     background: '1E88E5',
  60:     color: 'FFFFFF',
  61:     length: '2',
  62:     bold: 'true',
  63:   });
  64:   return `${AVATAR_BASE}?${params.toString()}`;
  65: };
  66: 
  67: export const ProfileScreen = () => {
  68:   const dispatch = useAppDispatch();
  69:   const profile = useAppSelector((state) => state.user.profile);
  70:   const [isLoggingOut, setIsLoggingOut] = useState(false);
  71: 
  72:   const avatarSource = useMemo(() => {
  73:     if (profile?.avatarUrl) {
  74:       return { uri: profile.avatarUrl };
  75:     }
  76:     return { uri: buildPlaceholderUrl(profile?.fullName) };
  77:   }, [profile?.avatarUrl, profile?.fullName]);
  78: 
  79:   const handleLogout = useCallback(async () => {
  80:     if (isLoggingOut) return;
  81:     setIsLoggingOut(true);
  82:     try {
  83:       await authApi.logout();
  84:     } catch (error) {
  85:       const message = error instanceof Error ? error.message : 'Не удалось выполнить выход';
  86:       Alert.alert('Ошибка выхода', message);
  87:     } finally {
  88:       dispatch(resetAuthState());
  89:       dispatch(clearProfile());
  90:       dispatch(resetDictionary());
  91:       dispatch(
  92:         hydrateProgress({
  93:           streak: 0,
  94:           weeklyMinutes: 0,
  95:           vocabularySize: 0,
  96:           dailyProgress: [],
  97:         }),
  98:       );
  99:       setIsLoggingOut(false);
 100:     }
 101:   }, [dispatch, isLoggingOut]);
 102: 
 103:   return (
 104:     <Screen>
 105:       <Card>
 106:         <Header>
 107:           <Avatar source={avatarSource} />
 108:           <Summary>
 109:             <Typography variant="subtitle">{profile?.fullName ?? 'Пользователь'}</Typography>
 110:             <Typography variant="caption">{profile ? roleDisplayName[profile.role] : 'Роль не определена'}</Typography>
 111:             <Typography variant="caption">{profile?.email ?? ''}</Typography>
 112:           </Summary>
 113:         </Header>
 114:         <Metrics>
 115:           <Metric>
 116:             <Typography variant="subtitle">{profile?.streakDays ?? 0}</Typography>
 117:             <Typography variant="caption">Дней подряд</Typography>
 118:           </Metric>
 119:           <Metric>
 120:             <Typography variant="subtitle">{profile?.completedLessons ?? 0}</Typography>
 121:             <Typography variant="caption">Уроков</Typography>
 122:           </Metric>
 123:           <Metric>
 124:             <Typography variant="subtitle">{profile?.level ?? '-'}</Typography>
 125:             <Typography variant="caption">Уровень</Typography>
 126:           </Metric>
 127:         </Metrics>
 128:       </Card>
 129:       <PrimaryButton onPress={handleLogout} disabled={isLoggingOut}>
 130:         {isLoggingOut ? 'Выходим...' : 'Выйти из аккаунта'}
 131:       </PrimaryButton>
 132:     </Screen>
 133:   );
 134: };
 135: 
